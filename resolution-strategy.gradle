/*
 * MIT License
 *
 * Copyright (c) 2021 Fineswap
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

allprojects {
    if (null != gradle.overrides && !gradle.overrides.isEmpty()) {
        configurations.all {
            resolutionStrategy {
                failOnVersionConflict()
                preferProjectModules()

                resolutionStrategy {
                    def conflictingVersions = [:]

                    eachDependency { DependencyResolveDetails details ->
                        final module = details.requested.module.toString()
                        final moduleVersion = details.requested.version
                        final version = gradle.overrides[module]

                        if (null == version) {
                            def otherVersion = conflictingVersions[module]
                            if (moduleVersion != '+' && null == otherVersion) {
                                conflictingVersions[module] = moduleVersion
                            } else if (moduleVersion != '+' && otherVersion != moduleVersion) {
                                System.out.println("POSSIBLE CONFLICTING VERSION FOR '$module'")
                                System.out.println("- VERSION 1: $otherVersion")
                                System.out.println("- VERSION 2: $moduleVersion")
                            }
                        } else if (moduleVersion != '+' && version != moduleVersion) {
                            force "$module:$version"
                            System.out.println("Enforcing dependency '$module' version '$version' (old version: '$moduleVersion')")
                        }
                    }
                }
            }
        }
    }
}
