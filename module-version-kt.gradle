/*
 * MIT License
 *
 * Copyright (c) 2021 Fineswap
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * A task to create a ModuleVersion.kt file in the main source directory of the module.
 * The resulting ModuleVersion.kt file should be pushed to git repo.
 */
task generateVersionKtSource {
    def outputDir = file("$buildDir/../src/main/kotlin")
    outputs.dir outputDir
    doFirst {
        def projectGroupDir = project.group.toString().replace('.', '/')
        def srcFile = new File(outputDir, "$projectGroupDir/ModuleVersion.kt")
        srcFile.parentFile.mkdirs()
        if (!srcFile.parentFile.isDirectory()) {
            throw new RuntimeException("Unable to create directory: $outputDir")
        }
        srcFile.write("""// AUTO-GENERATED; DO NOT EDIT BUT DO PUSH TO REPO!

@file:Suppress("unused")

package ${project.group}

/**
 * Module version as auto-configured by Gradle.
 */
const val MODULE_VERSION: String = "$project.version"
""")
    }
}

compileJava.dependsOn generateVersionKtSource
compileKotlin.dependsOn generateVersionKtSource
